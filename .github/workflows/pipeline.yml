name: test-hashicorp-vault

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Manual tag'

jobs:
  terraformPack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
    - name: Replace env vars in file
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY: ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID: ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID: ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID: ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: terraform/provider.tf
    - name: Upload terraform Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: terraform
        path: terraform
    - name: Init
      run: terraform init
      working-directory: terraform
    - name: Plan
      run: terraform plan -input=false -var 'suffix=vault-prd-01'
      working-directory: terraform

  deployInfra:
    environment:
      name: production
    needs: terraformPack
    runs-on: ubuntu-latest
    outputs:
      vmip: ${{ steps.deployvault.outputs.vmip }}
      simpleuser: ${{ steps.deployvault.outputs.simpleuser }}
    env:
      RESOURCES_NAME: "vault-prd-01"
    steps:
    - name: Download terraform Artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: terraform
        path: terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
    - name: Replace env vars in file
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY: ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID: ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID: ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID: ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: vault\config.hcl
    - name: Deploy
      id: deployvault
      run: |
        terraform init
        terraform plan -input=false -var 'suffix=${{ env.RESOURCES_NAME }}' -out='out.tfplan'
        terraform apply out.tfplan
        $vmip = terraform output -raw vm1_ip_addr
        echo ::set-output name=vmip::$vmip
        $simple_password = terraform -chdir=terraform output -raw simple_password
        echo ::set-output name=simpleuser::$simple_password
      working-directory: terraform

  setupVault:
    environment:
      name: production
    needs: deployInfra
    runs-on: ubuntu-latest
    steps:
    - name: Setup Vault
      run: |
        scp -i .\.ssh\id_rsa adminuser@$vmip vault/config.hcl '$HOME/config.hcl'
        ssh -i .\.ssh\id_rsa -l adminuser $vmip 'mkdir -p $HOME/vault/data && \
          vault server -config=config.hcl'
    - name: Setup Vault User
      run: |
        ssh -i .\.ssh\id_rsa -l adminuser ${{ needs.deployInfra.outputs.vmip }} 'vault auth enable userpass && \
          vault write auth/userpass/users/simple password=${{ needs.deployInfra.outputs.simpleuser }} policies=default && \
          vault secrets enable -path=production production && \
          vault kv put production/my-secret value="${{ secrets.FIRST_SECRET }}"'
    - name: Setup Vault kv
      run: |
        ssh -i .\.ssh\id_rsa -l adminuser ${{ needs.deployInfra.outputs.vmip }} 'vault secrets enable -path=production production && \
          vault kv put production/my-secret value=${{ secrets.FIRST_SECRET }}"'
