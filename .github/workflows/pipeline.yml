name: Deploy Hashicorp Vault

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Manual tag'

jobs:
  terraformPack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
    - name: Upload terraform Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: terraform
        path: terraform
    - name: Upload vault config
      uses: actions/upload-artifact@v2.2.4
      with:
        name: vault
        path: vault

  stagingInfra:
    needs: terraformPack
    runs-on: ubuntu-latest
    outputs:
      vmip: ${{ steps.getinfravalues.outputs.vmip }}
      simpleuser: ${{ steps.getinfravalues.outputs.simpleuser }}
    env:
      RESOURCES_NAME: "vault-stag-01"
    steps:
    - name: Download terraform Artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: terraform
        path: terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
        terraform_wrapper: false
    - name: Replace env vars in file
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY: ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID: ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID: ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID: ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: terraform/provider.tf
    - name: Deploy
      run: |
        terraform init
        terraform plan -input=false -var 'suffix=${{ env.RESOURCES_NAME }}' -out='out.tfplan'
        terraform apply out.tfplan
      working-directory: terraform
    - name: 'Get Infra Outputs'
      id: getinfravalues
      run: |
        vmip=$(terraform output -json -no-color vm1_ip_addr | jq -r .)
        simpleuser=$(terraform output -json -no-color simple_password | jq -r .value)
        echo ::set-output name=vmip::$vmip
        echo ::set-output name=simpleuser::$simpleuser
      working-directory: terraform

  setupStagingVault:
    needs: stagingInfra
    runs-on: ubuntu-latest
    steps:
    - name: Download vault config
      uses: actions/download-artifact@v2.0.10
      with:
        name: vault
        path: vault
    - name: Replace env vars in file
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY: ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID: ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID: ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID: ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: vault/config.hcl
    - name: Setup Vault
      run: |
        echo '${{ env.VM_SSH_KEY }}' > ./id_rsa
        scp -i ./id_rsa ./vault/config.hcl 'adminuser@${{ needs.stagingInfra.outputs.vmip }}:$HOME/'
        ssh -i ./id_rsa -l adminuser ${{ needs.stagingInfra.outputs.vmip }} 'cd $HOME/ && mkdir -p 'vault/data' && \
          vault server -config=./config.hcl'
        rm --force ./id_rsa
      env:
        VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
    - name: Setup Vault kv
      run: |
        echo '${{ env.VM_SSH_KEY }}' > ./id_rsa
        ssh -i ./id_rsa -l adminuser ${{ needs.stagingInfra.outputs.vmip }} 'vault secrets enable -path=staging staging && \
          vault kv put staging/my-secret value=notS0S33cret!"'
        rm --force ./id_rsa
      env:
        VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
    - name: Setup Vault User
      run: |
        echo '${{ env.VM_SSH_KEY }}' > ./id_rsa
        ssh -i ./id_rsa -l adminuser ${{ needs.stagingInfra.outputs.vmip }} 'vault auth enable userpass && \
          vault write auth/userpass/users/simple password=${{ fromJson(needs.stagingInfra.outputs.jsoninfra).simple_password.value.value }} policies=default'
        rm --force ./id_rsa
      env:
        VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}

  prodInfra:
    environment:
      name: production
    needs: terraformPack
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    outputs:
      vmip: ${{ steps.deployvault.outputs.vmip }}
      simpleuser: ${{ steps.deployvault.outputs.simpleuser }}
    env:
      RESOURCES_NAME: "vault-prd-01"
    steps:
    - name: Deploy
      id: deployvault
      run: |
        echo TODO
        echo ::set-output name=vmip::127.0.0.1
        echo ::set-output name=simpleuser::notS0S3cur3d@
