name: Deploy Hashicorp Vault

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Manual tag'

jobs:
  terraformPack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
    - name: Upload terraform Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: terraform
        path: terraform
    - name: Upload vault config
      uses: actions/upload-artifact@v2.2.4
      with:
        name: vault
        path: vault

  stagingInfra:
    needs: terraformPack
    runs-on: ubuntu-latest
    outputs:
      vmip: ${{ steps.getinfravalues.outputs.vmip }}
      simpleuser: ${{ steps.getinfravalues.outputs.simpleuser }}
    env:
      RESOURCES_NAME: "vault-stag-01"
    steps:
    - name: Download terraform Artifact
      uses: actions/download-artifact@v2.0.10
      with:
        name: terraform
        path: terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
        terraform_wrapper: false
    - name: Replace env vars in file
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY: ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID: ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID: ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID: ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: terraform/provider.tf
    - name: Deploy
      run: |
        terraform init
        terraform plan -input=false -var 'suffix=${{ env.RESOURCES_NAME }}' -out='out.tfplan'
        terraform apply out.tfplan
      working-directory: terraform
    - name: 'Get Infra Outputs'
      id: getinfravalues
      run: |
        vmip=$(terraform output -json -no-color vm1_ip_addr | jq -r .)
        simpleuser=$(terraform output -json -no-color simple_password | jq -r .value)
        echo ::set-output name=vmip::$vmip
        echo ::set-output name=simpleuser::$simpleuser
      working-directory: terraform

  setupStagingVault:
    needs: stagingInfra
    runs-on: ubuntu-latest
    env:
      RESOURCES_NAME: "vault-stag-01"
      KV_ENV: staging
    steps:
    - name: Download vault config
      uses: actions/download-artifact@v2.0.10
      with:
        name: vault
        path: vault
    - name: Replace env vars in file
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY: ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID: ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID: ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID: ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: vault/config.hcl
    - name: Copy vault config
      uses: garygrossgarten/github-action-scp@release
      with:
        local: ./vault/config.hcl
        remote: config.hcl
        host: ${{ needs.stagingInfra.outputs.vmip }}
        username: adminuser
        privateKey: ${{ secrets.VM_SSH_KEY }}
    - name: Copy vault systemd config
      uses: garygrossgarten/github-action-scp@release
      with:
        local: ./vault/vault.service
        remote: vault.service
        host: ${{ needs.stagingInfra.outputs.vmip }}
        username: adminuser
        privateKey: ${{ secrets.VM_SSH_KEY }}
    - name: Setup Vault
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ needs.stagingInfra.outputs.vmip }}
        username: adminuser
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          sudo cp config.hcl /etc/vault.d/vault.hcl
          sudo cp vault.service /etc/systemd/system/vault.service
          export VAULT_ADDR=http://127.0.0.1:8200
          export VAULT_SKIP_VERIFY=true
          sudo mkdir -p '/vault/data'
          sudo chown -R vault:vault /vault/
          sudo systemctl daemon-reload
          sudo systemctl unmask vault
          sudo systemctl enable vault
          sudo systemctl start vault
          vault operator init
          vault auth enable userpass
          vault write auth/userpass/users/simple password=${{ needs.stagingInfra.outputs.simpleuser }} policies=default
    - name: Setup Vault kv
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ needs.stagingInfra.outputs.vmip }}
        username: adminuser
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          export VAULT_ADDR=http://127.0.0.1:8200
          export VAULT_SKIP_VERIFY=true
          vault login -no-print -method=userpass username=simple password=${{ needs.stagingInfra.outputs.simpleuser }}
          vault secrets enable -path=${{ env.KV_ENV }} ${{ env.KV_ENV }}
          vault kv put ${{ env.KV_ENV }}/my-secret value='notS0S33cret!'

  prodInfra:
    environment:
      name: production
    needs: terraformPack
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    env:
      RESOURCES_NAME: "vault-stag-01"
      KV_ENV: production
    steps:
    - name: Deploy
      id: deployvault
      run: |
        echo TODO
        echo ::set-output name=vmip::127.0.0.1
        echo ::set-output name=simpleuser::notS0S3cur3d@
