name: Deploy Hashicorp Vault

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Manual tag'

env:
  resources_suffix: "neolutin-01"

jobs:
  terraformPack:
    name: "Package Artifacts"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Upload vault config
      uses: actions/upload-artifact@v2.2.4
      with:
        name: vault
        path: vault
    - name: Add Azure information in terraform provider
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY:   ${{ secrets.TERRAFORMSTORAGE_KEY }}
        AZURETENANT_ID:         ${{ secrets.AZURETENANT_ID }}
        AZURESUSCRIPTION_ID:    ${{ secrets.AZURESUSCRIPTION_ID }}
        TERRAFORMCLIENT_ID:     ${{ secrets.TERRAFORMCLIENT_ID }}
        TERRAFORMCLIENT_SECRET: ${{ secrets.TERRAFORMCLIENT_SECRET }}
      with:
        filename: terraform/provider.tf
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.0
        terraform_wrapper: false
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Check Status
      if: steps.fmt.outcome == 'failure' || steps.init.outcome == 'failure' || steps.validate.outcome == 'failure'
      run: exit 1
      shell: bash
    - name: Upload terraform Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: terraform
        path: terraform

  stagingInfra:
    if: ${{ github.ref != 'refs/heads/main' }}
    name: "Deploy Staging Infrastructure"
    needs: terraformPack
    env:
      environment: staging
    runs-on: ubuntu-latest
    outputs:
      vault-vm-name: ${{ steps.iac.outputs.vault-vm-name }}
      ansible-app-secret: ${{ steps.iac.outputs.ansible-app-secret }}
      ansible-app-clientid: ${{ steps.iac.outputs.ansible-app-clientid }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v2
      - name: Infrastructure deployment
        id: iac
        uses: ./actions/iac-vault
        with:
          resources-suffix: ${{ env.resources_suffix }}
          environment: ${{ env.environment }}
          azuretenant-id: ${{ secrets.AZURETENANT_ID }}
          terraformclient-id: ${{ secrets.TERRAFORMCLIENT_ID }}
          terraformclient-secret: ${{ secrets.TERRAFORMCLIENT_SECRET }}

  prepareStagingConf:
    if: ${{ github.ref != 'refs/heads/main' && github.event_name != 'pull_request' }}
    name: "Prepare Staging Vault Configuration"
    needs: stagingInfra
    env:
      environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v2
      - name: File configuration for Vault
        uses: ./actions/vault-configuration
        with:
          kv-name: "kv-${{ env.resources_suffix }}"
          secrets-environment: ${{ env.environment }}
          terraformstorage-key: ${{ secrets.TERRAFORMSTORAGE_KEY }}
          azuretenant-id: ${{ secrets.AZURETENANT_ID }}
          azuresuscription-id: ${{ secrets.AZURESUSCRIPTION_ID }}
          terraformclient-id: ${{ secrets.TERRAFORMCLIENT_ID }}
          terraformclient-secret: ${{ secrets.TERRAFORMCLIENT_SECRET }}
          ansible-client-id: ${{ needs.stagingInfra.outputs.ansible-app-clientid }}
          ansible-client-secret: ${{ needs.stagingInfra.outputs.ansible-app-secret }}
          host-name: ${{ needs.stagingInfra.outputs.vault-vm-name }}
          rg-name: "rg-${{ env.environment }}-${{ env.resources_suffix }}"

  prodInfra:
    name: "Deploy Production Infrastructure"
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'pull_request' }}
    needs: terraformPack
    runs-on: ubuntu-latest
    outputs:
      vault-vm-name: ${{ steps.iac.outputs.vault-vm-name }}
      ansible-app-secret: ${{ steps.iac.outputs.ansible-app-secret }}
      ansible-app-clientid: ${{ steps.iac.outputs.ansible-app-clientid }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v2
      - name: Infrastructure deployment
        id: iac
        uses: ./actions/iac-vault
        with:
          environment: prod
          resources-suffix: ${{ env.resources_suffix }}
          azuretenant-id: ${{ secrets.AZURETENANT_ID }}
          terraformclient-id: ${{ secrets.TERRAFORMCLIENT_ID }}
          terraformclient-secret: ${{ secrets.TERRAFORMCLIENT_SECRET }}

  prepareProdConf:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' }}
    name: "Prepare Production Vault Configuration"
    needs: prodInfra
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v2
      - name: File configuration for Vault
        uses: ./actions/vault-configuration
        with:
          kv-name: "kv-${{ env.resources_suffix }}"
          secrets-environment: production
          terraformstorage-key: ${{ secrets.TERRAFORMSTORAGE_KEY }}
          azuretenant-id: ${{ secrets.AZURETENANT_ID }}
          azuresuscription-id: ${{ secrets.AZURESUSCRIPTION_ID }}
          terraformclient-id: ${{ secrets.TERRAFORMCLIENT_ID }}
          terraformclient-secret: ${{ secrets.TERRAFORMCLIENT_SECRET }}
          ansible-client-id: ${{ needs.prodInfra.outputs.ansible-app-clientid }}
          ansible-client-secret: ${{ needs.prodInfra.outputs.ansible-app-secret }}
          host-name: ${{ needs.prodInfra.outputs.vault-vm-name }}
          rg-name: "rg-${{ env.environment }}-${{ env.resources_suffix }}"
