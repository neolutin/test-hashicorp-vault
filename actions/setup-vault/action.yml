name: 'Setup Vault'
description: 'Common actions to deploy an Hashicorp vault on an environment'
inputs:
  vault-vm-name:
    description: "Name (FQDN or IP) of the VM in which vault will be configured"
    required: true
  simple-user: 
    description: "Password of the vault service user"
    required: true
  secrets-environment: 
    description: "Secrets environment to create"
    required: true
  kv-name:
    description: 'Name of the Azure Keyvault containing the unseal key'
    required: true
  ssh-key:
    description: "Key to connect to the newly created VM"
    required: true
  terraformstorage-key:
    description: 'Key to access storage of tfstate'
    required: true
  azuretenant-id:
    description: 'Azure tenant'
    required: true
  azuresuscription-id:
    description: 'Azure subscription where the infra will be deployed'
    required: true
  terraformclient-id:
    description: 'Client Id of the Azure App allowed to deploy in the subscription'
    required: true
  terraformclient-secret:
    description: 'Secret of the Azure App allowed to deploy in the subscription'
    required: true
  first-kv:
    description: "First kv value to add to the vault"
    default: 'notS0S33cret!'
outputs:
  vault-token:
    description: "Root token of the vault"
    value: ${{ steps.setupvault.outputs.vaulttoken }}

runs:
  using: "composite"
  steps:
    - name: Download vault config
      uses: actions/download-artifact@v2.0.10
      with:
        name: vault
        path: vault
    - name: Add azure information for vault auto-unseal
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        TERRAFORMSTORAGE_KEY:   ${{ inputs.terraformstorage-key }}
        AZURETENANT_ID:         ${{ inputs.azuretenant-id }}
        AZURESUSCRIPTION_ID:    ${{ inputs.azuresuscription-id }}
        TERRAFORMCLIENT_ID:     ${{ inputs.terraformclient-id }}
        TERRAFORMCLIENT_SECRET: ${{ inputs.terraformclient-secret }}
        KV_NAME:                ${{ inputs.kv-name }}
      with:
        filename: vault/config.hcl
    - name: Add policy for custom path
      uses: falnyr/replace-env-vars-action@v1.2.1
      env:
        ENVIRONMENT: ${{ inputs.secrets-environment }}
      with:
        filename: vault/policy.hcl
    - name: Copy vault config
      uses: garygrossgarten/github-action-scp@release
      with:
        local: ./vault/config.hcl
        remote: config.hcl
        host: ${{ inputs.vault-vm-name }}
        username: adminuser
        privateKey: ${{ inputs.ssh-key }}
    - name: Copy vault policy
      uses: garygrossgarten/github-action-scp@release
      with:
        local: ./vault/policy.hcl
        remote: policy.hcl
        host: ${{ inputs.vault-vm-name }}
        username: adminuser
        privateKey: ${{ inputs.ssh-key }}
    - name: Copy vault systemd config
      uses: garygrossgarten/github-action-scp@release
      with:
        local: ./vault/vault.service
        remote: vault.service
        host: ${{ inputs.vault-vm-name }}
        username: adminuser
        privateKey: ${{ inputs.ssh-key }}
    - name: Setup Vault
      uses: appleboy/ssh-action@v0.1.4
      id: setupvault
      with:
        host: ${{ inputs.vault-vm-name }}
        username: adminuser
        key: ${{ inputs.ssh-key }}
        script: |
          sudo cp config.hcl /etc/vault.d/vault.hcl
          sudo cp vault.service /etc/systemd/system/vault.service
          export VAULT_ADDR=http://127.0.0.1:8200
          export VAULT_SKIP_VERIFY=true
          sudo mkdir -p '/vault/data'
          sudo chown -R vault:vault /vault/
          sudo systemctl daemon-reload
          sudo systemctl unmask vault
          sudo systemctl enable vault
          sudo systemctl restart vault
          sleep 30 # TODO: Add a check on systemctl status vault
          INIT_VALS=$(vault operator init -format=json)
          export VAULT_TOKEN=$(echo $INIT_VALS | jq -r .root_token)
          sleep 30 # TODO: Add a check on vault status
          vault login -no-print
          vault auth enable userpass
          vault policy write ${{ inputs.secrets-environment }}-policy policy.hcl
          vault write auth/userpass/users/simple password=${{ inputs.simple-user }} policies=${{ inputs.secrets-environment }}-policy
          vault secrets enable -path=${{ inputs.secrets-environment }} kv
          echo ::set-output name=vaulttoken::$VAULT_TOKEN # TODO: Harden export
    - name: Setup Vault kv
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ inputs.vault-vm-name }}
        username: adminuser
        key: ${{ inputs.ssh-key }}
        script: |
          export VAULT_ADDR=http://127.0.0.1:8200
          export VAULT_SKIP_VERIFY=true
          vault login -no-print -method=userpass username=simple password=${{ inputs.simple-user }}
          vault kv put ${{ inputs.secrets-environment }}/my-secret value=${{ inputs.first-kv }}
